// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1alpha1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	auth "kope.io/auth/pkg/apis/auth"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_IdentitySpec_To_auth_IdentitySpec,
		Convert_auth_IdentitySpec_To_v1alpha1_IdentitySpec,
		Convert_v1alpha1_TokenSpec_To_auth_TokenSpec,
		Convert_auth_TokenSpec_To_v1alpha1_TokenSpec,
		Convert_v1alpha1_User_To_auth_User,
		Convert_auth_User_To_v1alpha1_User,
		Convert_v1alpha1_UserList_To_auth_UserList,
		Convert_auth_UserList_To_v1alpha1_UserList,
		Convert_v1alpha1_UserSpec_To_auth_UserSpec,
		Convert_auth_UserSpec_To_v1alpha1_UserSpec,
	)
}

func autoConvert_v1alpha1_IdentitySpec_To_auth_IdentitySpec(in *IdentitySpec, out *auth.IdentitySpec, s conversion.Scope) error {
	out.ID = in.ID
	out.ProviderID = in.ProviderID
	out.Username = in.Username
	return nil
}

func Convert_v1alpha1_IdentitySpec_To_auth_IdentitySpec(in *IdentitySpec, out *auth.IdentitySpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_IdentitySpec_To_auth_IdentitySpec(in, out, s)
}

func autoConvert_auth_IdentitySpec_To_v1alpha1_IdentitySpec(in *auth.IdentitySpec, out *IdentitySpec, s conversion.Scope) error {
	out.ID = in.ID
	out.ProviderID = in.ProviderID
	out.Username = in.Username
	return nil
}

func Convert_auth_IdentitySpec_To_v1alpha1_IdentitySpec(in *auth.IdentitySpec, out *IdentitySpec, s conversion.Scope) error {
	return autoConvert_auth_IdentitySpec_To_v1alpha1_IdentitySpec(in, out, s)
}

func autoConvert_v1alpha1_TokenSpec_To_auth_TokenSpec(in *TokenSpec, out *auth.TokenSpec, s conversion.Scope) error {
	out.ID = in.ID
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.HashedSecret, &out.HashedSecret, s); err != nil {
		return err
	}
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.RawSecret, &out.RawSecret, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_TokenSpec_To_auth_TokenSpec(in *TokenSpec, out *auth.TokenSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_TokenSpec_To_auth_TokenSpec(in, out, s)
}

func autoConvert_auth_TokenSpec_To_v1alpha1_TokenSpec(in *auth.TokenSpec, out *TokenSpec, s conversion.Scope) error {
	out.ID = in.ID
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.HashedSecret, &out.HashedSecret, s); err != nil {
		return err
	}
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.RawSecret, &out.RawSecret, s); err != nil {
		return err
	}
	return nil
}

func Convert_auth_TokenSpec_To_v1alpha1_TokenSpec(in *auth.TokenSpec, out *TokenSpec, s conversion.Scope) error {
	return autoConvert_auth_TokenSpec_To_v1alpha1_TokenSpec(in, out, s)
}

func autoConvert_v1alpha1_User_To_auth_User(in *User, out *auth.User, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_UserSpec_To_auth_UserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_User_To_auth_User(in *User, out *auth.User, s conversion.Scope) error {
	return autoConvert_v1alpha1_User_To_auth_User(in, out, s)
}

func autoConvert_auth_User_To_v1alpha1_User(in *auth.User, out *User, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_auth_UserSpec_To_v1alpha1_UserSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_auth_User_To_v1alpha1_User(in *auth.User, out *User, s conversion.Scope) error {
	return autoConvert_auth_User_To_v1alpha1_User(in, out, s)
}

func autoConvert_v1alpha1_UserList_To_auth_UserList(in *UserList, out *auth.UserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]auth.User, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_User_To_auth_User(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_UserList_To_auth_UserList(in *UserList, out *auth.UserList, s conversion.Scope) error {
	return autoConvert_v1alpha1_UserList_To_auth_UserList(in, out, s)
}

func autoConvert_auth_UserList_To_v1alpha1_UserList(in *auth.UserList, out *UserList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			if err := Convert_auth_User_To_v1alpha1_User(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_auth_UserList_To_v1alpha1_UserList(in *auth.UserList, out *UserList, s conversion.Scope) error {
	return autoConvert_auth_UserList_To_v1alpha1_UserList(in, out, s)
}

func autoConvert_v1alpha1_UserSpec_To_auth_UserSpec(in *UserSpec, out *auth.UserSpec, s conversion.Scope) error {
	out.Username = in.Username
	out.Groups = in.Groups
	if in.Tokens != nil {
		in, out := &in.Tokens, &out.Tokens
		*out = make([]*auth.TokenSpec, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.Tokens = nil
	}
	if in.Identities != nil {
		in, out := &in.Identities, &out.Identities
		*out = make([]auth.IdentitySpec, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_IdentitySpec_To_auth_IdentitySpec(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Identities = nil
	}
	return nil
}

func Convert_v1alpha1_UserSpec_To_auth_UserSpec(in *UserSpec, out *auth.UserSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_UserSpec_To_auth_UserSpec(in, out, s)
}

func autoConvert_auth_UserSpec_To_v1alpha1_UserSpec(in *auth.UserSpec, out *UserSpec, s conversion.Scope) error {
	out.Username = in.Username
	out.Groups = in.Groups
	if in.Tokens != nil {
		in, out := &in.Tokens, &out.Tokens
		*out = make([]*TokenSpec, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.Tokens = nil
	}
	if in.Identities != nil {
		in, out := &in.Identities, &out.Identities
		*out = make([]IdentitySpec, len(*in))
		for i := range *in {
			if err := Convert_auth_IdentitySpec_To_v1alpha1_IdentitySpec(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Identities = nil
	}
	return nil
}

func Convert_auth_UserSpec_To_v1alpha1_UserSpec(in *auth.UserSpec, out *UserSpec, s conversion.Scope) error {
	return autoConvert_auth_UserSpec_To_v1alpha1_UserSpec(in, out, s)
}
